// package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import java.util.Timer;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.vision.apriltag.AprilTagDetection;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import com.qualcomm.robotcore.hardware.Gamepad;
import org.firstinspires.ftc.vision.VisionPortal;
import org.firstinspires.ftc.vision.apriltag.AprilTagProcessor;
import com.qualcomm.robotcore.util.ElapsedTime;
import java.util.List;
//   import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
// import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
// import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
// import org.firstinspires.ftc.vision.apriltag.AprilTagProcessor;
// import org.firstinspires.ftc.vision.VisionPortal;
// import com.qualcomm.robotcore.hardware.Gamepad;
// import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
// import org.firstinspires.ftc.vision.apriltag.AprilTagDetection;

 @TeleOp

 public class HaniyaPID extends LinearOpMode{

   
     private AprilTagProcessor aprilTag;
     private VisionPortal visionPortal;
     private double kp = 0.5;
     private double ki = 0.4;
     private double kd = 0.6;
     ElapsedTime Timer = new ElapsedTime();
      double Integral_error = 0;
     @Override
     public void runOpMode() {
         initAT();
         waitForStart();
                while (opModeIsActive()) {
             double pidOutput = PIDController(30, 15);
             telemetry.addData("PID Output", pidOutput);
             telemetry.update();
            
             Gamepad gamepad = gamepad1; // Use the existing gamepad instance
             if (gamepad.dpad_down) {
                 visionPortal.stopStreaming();
             } else if (gamepad.dpad_up) {
                 visionPortal.resumeStreaming();
             }
            
             telemetryAprilTag();
         }
     }

     private void initAT() {
         aprilTag = AprilTagProcessor.easyCreateWithDefaults();
         visionPortal = VisionPortal.easyCreateWithDefaults(hardwareMap.get(WebcamName.class, "Webcam 1"), aprilTag);
     }

     private double PIDController(double target, double current) {
         double proportion_error = target - current;
          Integral_error +=  proportion_error * Timer.time();
          Timer.reset();
         return kp * proportion_error + ki * Integral_error;
     }
     

     private void telemetryAprilTag() {
       List<AprilTagDetection> currentDetections = aprilTag.getDetections();
         telemetry.addData("# AprilTags Detected", currentDetections.size());

         for (AprilTagDetection detection : currentDetections) {
             if (detection.metadata != null) {
                 telemetry.addLine(String.format("\n==== (ID %d) %s", detection.id, detection.metadata.name));
                 telemetry.addLine(String.format("XYZ %6.1f %6.1f %6.1f  (inch)", detection.ftcPose.x, detection.ftcPose.y, detection.ftcPose.z));
                 telemetry.addLine(String.format("PRY %6.1f %6.1f %6.1f  (deg)", detection.ftcPose.pitch, detection.ftcPose.roll, detection.ftcPose.yaw));
                 telemetry.addLine(String.format("RBE %6.1f %6.1f %6.1f  (inch, deg, deg)", detection.ftcPose.range, detection.ftcPose.bearing, detection.ftcPose.elevation));
             } else {
                 telemetry.addLine(String.format("\n==== (ID %d) Unknown", detection.id));
                 telemetry.addLine(String.format("Center %6.0f %6.0f   (pixels)", detection.center.x, detection.center.y));
             }
         }
         telemetry.addLine("\nkey:\nXYZ = X (Right), Y (Forward), Z (Up) dist.");
         telemetry.addLine("PRY = Pitch, Roll & Yaw (XYZ Rotation)");
         telemetry.addLine("RBE = Range, Bearing & Elevation");
         telemetry.update();
     }
 }
