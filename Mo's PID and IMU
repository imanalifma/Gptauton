package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;
import org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.hardware.IMU;


@Autonomous(name="Hdijghuidhnerujeikehneduijedn", group="Linear OpMode")
public class Hdijghuidhnerujeikehneduijedn extends LinearOpMode {
    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor frontLeft = null;
    private DcMotor frontRight = null;
    private DcMotor backleft = null;
    private DcMotor backright = null;
    private IMU imu;
    ElapsedTime timer = new ElapsedTime();
    // proportion
    private double kp = 0.2;
    // integral
    private double ki = 0.2;
    // derivative
    private double kd = 0.2;
    
    double inte = 0;
    double lasterror = 0;
    //IMU.Parameters parameters = new IMU.Parameters();
    
    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Contzer app on the phone).
        frontLeft  = hardwareMap.get(DcMotor.class, "frontLeft");
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        backleft = hardwareMap.get(DcMotor.class, "backleft");
        backright = hardwareMap.get(DcMotor.class, "backright");
        imu = hardwareMap.get(IMU.class, "imu");


        //     new RevHubOrientationOnRobot(
                RevHubOrientationOnRobot.LogoFacingDirection logoDirection = RevHubOrientationOnRobot.LogoFacingDirection.UP;
                RevHubOrientationOnRobot.UsbFacingDirection usbDirection = RevHubOrientationOnRobot.UsbFacingDirection.RIGHT;
                 RevHubOrientationOnRobot orientationOnRobot = new RevHubOrientationOnRobot(logoDirection, usbDirection);


        imu.initialize(new IMU.Parameters(orientationOnRobot));
        //       )
        //         );
                
        // parameters.mode =IMU.SensorMode.IMU;
        // parameters.angleUnit = IMU.AngleUnit.DEGREES;
        //imu.initialize(parameters);
        
        Orientation myRobotOrientation;
        //robotOrientation = imu.getRobotYawPitchRollAngels();
        // To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.
        // Pushing the left stick forward MUST make robot go forward. So adjust these two lines based on your first test drive.
        // Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips
        // leftDrive.setDirection(DcMotor.Direction.REVERSE);
        // rightDrive.setDirection(DcMotor.Direction.FORWARD);
        // // Wait for the game to start (driver presses PLAY)
        waitForStart();
        // runtime.reset();
        // // run until the end of the match (driver presses STOP)
        // // forward
        frontLeft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        frontRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        backleft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        backright.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        while (opModeIsActive()) {


        if (gamepad1.y) { 
                telemetry.addData("Yaw", "Resetting\n");
                imu.resetYaw();
            } else {
                telemetry.addData("Yaw", "Press Y (triangle) on Gamepad to reset\n");
            }

        // telemetry.addData("Error ", PIDContzer(100, Yaw));
        //telementry.addData(imu);
        
      // // myRobotOrientation = imu.getAngularOrientation(
      //       AxesReference.INTRINSIC,
      //       AxesOrder.XYZ,
      //       AngleUnit.DEGREES



            YawPitchRollAngles orientation = imu.getRobotYawPitchRollAngles();
            AngularVelocity angularVelocity = imu.getRobotAngularVelocity(AngleUnit.DEGREES);

            double Yaw =  orientation.getYaw(AngleUnit.DEGREES);
            double Pitch =  orientation.getPitch(AngleUnit.DEGREES);
            double Roll =  orientation.getRoll(AngleUnit.DEGREES);
            telemetry.addData("Current     Yaw (Z)", "%.2f Deg. (Heading)", Yaw);
            telemetry.addData("Pitch (X)", "%.2f Deg.", orientation.getPitch(AngleUnit.DEGREES));
            telemetry.addData("Roll (Y)", "%.2f Deg.\n", orientation.getRoll(AngleUnit.DEGREES));
            telemetry.addData("Yaw (Z) velocity", "%.2f Deg/Sec", angularVelocity.zRotationRate);
            telemetry.addData("Pitch (X) velocity", "%.2f Deg/Sec", angularVelocity.xRotationRate);
            telemetry.addData("Roll (Y) velocity", "%.2f Deg/Sec", angularVelocity.yRotationRate);
        
        // telemetry.addData("imu Yaw: ", Yaw);
        // telemetry.addData("imu Pitch: ", Pitch);
        // telemetry.addData("imu Roll: ", Roll);
        
        double power = PIDContzer(100, Yaw);
        telemetry.addData("power: ", power);
        
        
        //frontLeft.setPower(power);
        //frontRight.setPower(power);
        backright.setPower(power);
        backleft.setPower(power);
        telemetry.update();
        }
        
        

        
    }
    public double PIDContzer(double target, double location) {
    
        double error = angleWrap(target - location);
        double pro = target - location;
        inte += pro * timer.seconds();
        double changeee = pro - lasterror;
        double der = changeee / timer.seconds();
        lasterror = pro;
        
        pro = pro*kp;
        inte = inte * ki;
        der = der * kd;
       
        timer.reset();
        double sum = pro + inte + der;
        return sum;
    
    }

  public double angleWrap(double radians) {
    while (radians > 180) {
      radians -= 2 * 180;
        }
    while (radians < 180) {
      radians += 2 * 180;
        }
    return radians;
  }

    
    
    
}
