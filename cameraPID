package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.vision.apriltag.AprilTagProcessor;
import org.firstinspires.ftc.vision.VisionPortal;
import com.qualcomm.robotcore.hardware.Gamepad;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.vision.apriltag.AprilTagDetection;
import com.qualcomm.robotcore.util.Telemetry;
import java.util.concurrent.TimeUnit;
import com.qualcomm.robotcore.util.ElapsedTime;

@Autonomous

public class FatimaCamera extends LinearOpMode{


    AprilTagProcessor aprilTag;
    VisionPortal visionPortal;
    Gamepad gamepad; 
    double kp = 0.5;
    double ki = 0.5;
    double kd = 0.5;
    public ElapsedTime runtime = new ElapsedTime();
     public void initAT (){


    //visionPortal = new VisionPortal("Vision Portal", hardwareMap.get(WebcamName.class, "Webcam 1"));
        //visionPortal.initCamera(hardwareMap.get(WebcamName.class, "Webcam 1"), 640, 480);
        //visionPortal.startStreaming();
    aprilTag = AprilTagProcessor.easyCreateWithDefaults();

    visionPortal = visionPortal.easyCreateWithDefaults(hardwareMap.get(WebcamName.class, "Webcam 1"), aprilTag);


}
@Override
public void runOpMode(){

  initAT();
  waitForStart();
  while(opModeIsActive()){
      PIDController(30,15);
   // telemetryAprilTag();   
    gamepad = gamepad1; // Initialize gamepad
            boolean dpad_down_isPressed = gamepad.dpad_down;
            boolean dpad_up_isPressed = gamepad.dpad_up;
    if(dpad_down_isPressed){
        visionPortal.stopStreaming();

    }
    else if(dpad_up_isPressed){
        visionPortal.resumeStreaming();
    }
    else{
  
    }

  }
}
public double PIDController(double target, double current){
    double proportion_error = target - current;
    result *= kp;
    return result;
    double integral sum += proportion_error * runtime;
    runtime.reset();
    double derivative = proportion_error/runtime;

  
    }
}


/*private void telemetryAprilTag() {

    List<AprilTagDetection> currentDetections = aprilTag.getDetections();
    telemetry.addData("# AprilTags Detected", currentDetections.size());

    // Step through the list of detections and display info for each one.
    for (AprilTagDetection detection : currentDetections) {
        if (detection.metadata != null) {
            telemetry.addLine(String.format("\n==== (ID %d) %s", detection.id, detection.metadata.name));
            telemetry.addLine(String.format("XYZ %6.1f %6.1f %6.1f  (inch)", detection.ftcPose.x, detection.ftcPose.y, detection.ftcPose.z));
            telemetry.addLine(String.format("PRY %6.1f %6.1f %6.1f  (deg)", detection.ftcPose.pitch, detection.ftcPose.roll, detection.ftcPose.yaw));
            telemetry.addLine(String.format("RBE %6.1f %6.1f %6.1f  (inch, deg, deg)", detection.ftcPose.range, detection.ftcPose.bearing, detection.ftcPose.elevation));
        } else {
            telemetry.addLine(String.format("\n==== (ID %d) Unknown", detection.id));
            telemetry.addLine(String.format("Center %6.0f %6.0f   (pixels)", detection.center.x, detection.center.y));
        }
    }   // end for() loop

    // Add "key" information to telemetry
    telemetry.addLine("\nkey:\nXYZ = X (Right), Y (Forward), Z (Up) dist.");
    telemetry.addLine("PRY = Pitch, Roll & Yaw (XYZ Rotation)");
    telemetry.addLine("RBE = Range, Bearing & Elevation");
    telemetry.update();
    }   // end method telemetryAprilTag()






    // todo: write your code here
}    // todo: write your code here
}*/
